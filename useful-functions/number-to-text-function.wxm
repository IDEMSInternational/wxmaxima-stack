/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 22.04.0 ] */
/* [wxMaxima: title   start ]
STACK Sandbox
   [wxMaxima: title   end   ] */


/* [wxMaxima: comment start ]
This document loads the extra files needed for STACK.
See https://github.com/maths/moodle-qtype_stack

1. Set your operation system in the variable maximaplatform. For Windows set it to "win".
2. If needed, set the stacklocation variable to the location of this sandbox file and the needed maxima and lisp files.
3. Specify a directory for temporary working files, e.g. /tmp or C:/tmp
[Directories in 2 & 3 can be the same if you don't mind clutter.]

Note, that plots *will not work* in this sandbox.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
/* No trailing slash. */
maximaplatform:"win"$
stacklocation:"."$
stacktmplocation:"."$

/* For MS platforms you normally need to explicitly set the path.
   Use the forward slash as a directory seperator.
   You have cloned your code into c:/tmp/stackroot   
*/

/*
maximaplatform:"win"$
stacklocation:"c:/tmp/stackroot/stack"$
*/


/****************************************************
   There should be no need to edit below this line.  
   
   These commands add the location to Maxima's search path. 
*/
file_search_maxima:append( [sconcat(stacklocation, "/stack/maxima/###.{mac,mc}")] , file_search_maxima)$
file_search_lisp:append( [sconcat(stacklocation, "/stack/maxima/###.{lisp}")] , file_search_lisp)$
file_search_maxima:append( [sconcat(stacktmplocation, "/###.{mac,mc}")] , file_search_maxima)$
file_search_lisp:append( [sconcat(stacktmplocation, "/###.{lisp}")] , file_search_lisp)$

STACK_SETUP(ex):=block(
    MAXIMA_VERSION_NUM_EXPECTED:0,
    MAXIMA_PLATFORM:maximaplatform,
    maxima_tempdir:"",
    IMAGE_DIR:"",
    PLOT_SIZE:[450,300],
    PLOT_TERMINAL:"svg",
    PLOT_TERM_OPT:"dynamic font \",11\" linewidth 1.2",
    DEL_CMD:"rm",
    GNUPLOT_CMD:"gnuplot",
    MAXIMA_VERSION_EXPECTED:"default",
    URL_BASE:"!ploturl!",
    /* Define units available in STACK. */
    stack_unit_si_prefix_code:[y, z, a, f, p, n, u, m, c, d, da, h, k, M, G, T, P, E, Z, Y],
    stack_unit_si_prefix_multiplier:[10^-24, 10^-21, 10^-18, 10^-15, 10^-12, 10^-9, 10^-6, 10^-3, 10^-2, 10^-1, 10, 10^2, 10^3, 10^6, 10^9, 10^12, 10^15, 10^18, 10^21, 10^24],
    stack_unit_si_prefix_tex:["\\mathrm{y}", "\\mathrm{z}", "\\mathrm{a}", "\\mathrm{f}", "\\mathrm{p}", "\\mathrm{n}", "\\mu ", "\\mathrm{m}", "\\mathrm{c}", "\\mathrm{d}", "\\mathrm{da}", "\\mathrm{h}", "\\mathrm{k}", "\\mathrm{M}", "\\mathrm{G}", "\\mathrm{T}", "\\mathrm{P}", "\\mathrm{E}", "\\mathrm{Z}", "\\mathrm{Y}"],
    stack_unit_si_unit_code:[m, l, L, g, t, s, h, Hz, Bq, cd, N, Pa, cal, Cal, Btu, eV, J, W, A, ohm, C, V, F, S, Wb, T, H, Gy, rem, Sv, lx, lm, mol, M, kat, rad, sr, K, VA, eV],
    stack_unit_si_unit_conversions:[m, m^3/1000, m^3/1000, kg/1000, 1000*kg, s, s*3600, 1/s, 1/s, cd, (kg*m)/s^2, kg/(m*s^2), 4.2*J, 4200*J, 1055*J, 1.602177e-19*J, (kg*m^2)/s^2, (kg*m^2)/s^3, A, (kg*m^2)/(s^3*A^2), s*A, (kg*m^2)/(s^3*A), (s^4*A^2)/(kg*m^2), (s^3*A^2)/(kg*m^2), (kg*m^2)/(s^2*A), kg/(s^2*A), (kg*m^2)/(s^2*A^2), m^2/s^2, 0.01*Sv, m^2/s^2, cd/m^2, cd, mol, mol/(m^3/1000), mol/s, rad, sr, K, (kg*m^2)/(s^3), 1.602176634E-19*J],
    stack_unit_si_unit_tex:["\\mathrm{m}", "\\mathrm{l}", "\\mathrm{L}", "\\mathrm{g}", "\\mathrm{t}", "\\mathrm{s}", "\\mathrm{h}", "\\mathrm{Hz}", "\\mathrm{Bq}", "\\mathrm{cd}", "\\mathrm{N}", "\\mathrm{Pa}", "\\mathrm{cal}", "\\mathrm{cal}", "\\mathrm{Btu}", "\\mathrm{eV}", "\\mathrm{J}", "\\mathrm{W}", "\\mathrm{A}", "\\Omega", "\\mathrm{C}", "\\mathrm{V}", "\\mathrm{F}", "\\mathrm{S}", "\\mathrm{Wb}", "\\mathrm{T}", "\\mathrm{H}", "\\mathrm{Gy}", "\\mathrm{rem}", "\\mathrm{Sv}", "\\mathrm{lx}", "\\mathrm{lm}", "\\mathrm{mol}", "\\mathrm{M}", "\\mathrm{kat}", "\\mathrm{rad}", "\\mathrm{sr}", "\\mathrm{K}", "\\mathrm{VA}", "\\mathrm{eV}"],
    stack_unit_other_unit_code:[min, amu, u, mmHg, bar, ha, cc, gal, mbar, atm, torr, rev, deg, rpm, au, Da, Np, B, dB, day, year, hp, in, ft, yd, mi, lb],
    stack_unit_other_unit_conversions:[s*60, amu, amu, 133.322387415*Pa, 10^5*Pa, 10^4*m^2, m^3*10^(-6), 3.785*l, 10^2*Pa, 101325*Pa, 101325/760*Pa, 2*pi*rad, pi*rad/180, pi*rad/(30*s), 149597870700*m, 1.660539040E-27*kg, Np, B, dB, 86400*s, 3.156e7*s, hp, in, 12*in, 36*in, 5280*12*in, lb],
    stack_unit_other_unit_tex:["\\mathrm{min}", "\\mathrm{amu}", "\\mathrm{u}", "\\mathrm{mmHg}", "\\mathrm{bar}", "\\mathrm{ha}", "\\mathrm{cc}", "\\mathrm{gal}", "\\mathrm{mbar}", "\\mathrm{atm}", "\\mathrm{torr}", "\\mathrm{rev}", "\\mathrm{{}^{o}}", "\\mathrm{rpm}", "\\mathrm{au}", "\\mathrm{Da}", "\\mathrm{Np}", "\\mathrm{B}", "\\mathrm{dB}", "\\mathrm{day}", "\\mathrm{year}", "\\mathrm{hp}", "\\mathrm{in}", "\\mathrm{ft}", "\\mathrm{yd}", "\\mathrm{mi}", "\\mathrm{lb}"],
    true)$

/* Load the main libraries. */
load("stackmaxima.mac")$
load("stats")$
load("distrib")$
load("descriptive")$
print(sconcat("[ STACK-Maxima started, library version ", stackmaximaversion, " ]"))$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* Optional but useful. */
display2d:true;
simp:true;
debug:true;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
explode_num(num) := block(
    length:floor(log(num)/log(10)),
    digList:[],
    for i: 0 thru length do (
        digList: append(digList, [floor(num/10^(length-i))]),
        num: num-last(digList)*10^(length-i)
    ),
    return(digList)
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
group_elements(digList) := block(
    
    digListGrouped: [],
    iterations: ceiling(length(digList)/3)-1,
    
    for i: 0 thru iterations do (
        group: [],
        for i: 0 thru 2 do (
            if length(digList) > 0 then (
                group: push(last(digList), group),
                revList:reverse(digList),
                pop(revList),
                digList:reverse(revList)
           )  else (
                group: append([0], group)
            )
        ),
        digListGrouped: append([group], digListGrouped)
    ),
    
    return(digListGrouped)
    
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
wordBank[0]: "";
wordBank[1]: "one";
wordBank[2]: "two";
wordBank[3]: "three";
wordBank[4]: "four";
wordBank[5]: "five";
wordBank[6]: "six";
wordBank[7]: "seven";
wordBank[8]: "eight";
wordBank[9]: "nine";
wordBank[10]: "ten";
wordBank[11]: "eleven";
wordBank[12]: "twelve";
wordBank[13]: "thirteen";
wordBank[14]: "fourteen";
wordBank[15]: "fifteen";
wordBank[16]: "sixteen";
wordBank[17]: "seventeen";
wordBank[18]: "eighteen";
wordBank[19]: "nineteen";
wordBank[20]: "twenty";
wordBank[30]: "thirty";
wordBank[40]: "forty";
wordBank[50]: "fifty";
wordBank[60]: "sixty";
wordBank[70]: "seventy";
wordBank[80]: "eighty";
wordBank[90]: "ninety";

triplet_to_words(triplet) := block(
    
    wordHundreds: concat(wordBank[triplet[1]], " hundred"),
    numTensUnits: 10*triplet[2]+triplet[3],
    
    if triplet[1] > 0 then (
    
        if (numTensUnits = 0) then 
            return(hundreds)
        else if (numTensUnits <= 20) then
            return(concat(wordHundreds, " and ", wordBank[10*triplet[2]+triplet[3]]))
        else
            return(concat(wordHundreds, " and ", wordBank[10*triplet[2]], " ", wordBank[triplet[3]]))
    
    ) else if (numTensUnits > 0) then (
    
        if (numTensUnits <= 20) then
            return(wordBank[10*triplet[2]+triplet[3]])
        else
            return(concat(wordBank[10*triplet[2]], " ", wordBank[triplet[3]]))
    
    ) else return("zero")
    
)$

triplet_to_words([0,0,2]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
magBank[1]:"thousand";
magBank[2]:"million";
magBank[3]:"billion";
magBank[4]:"trillion";

num_to_words(num) := block(

    digList: explode_num(num),
    digListGrouped: group_elements(digList),
    numberName: "",
    
    for i: 1 thru length(digListGrouped)-1 do (
        if (digListGrouped[i] # [0,0,0]) then (
            numberName: concat(
                numberName, 
                triplet_to_words(digListGrouped[i]), 
                " ", 
                magBank[length(digListGrouped) - i],
                ", "
            )
        )
    ),
    
    numberName: concat(
        numberName, 
        triplet_to_words(last(digListGrouped))
    ),

    return(numberName)

)$

/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
num_to_words(10000000150);
/* [wxMaxima: input   end   ] */



/* Old versions of Maxima abort on loading files that end in a comment. */
"Created with wxMaxima 22.04.0"$
