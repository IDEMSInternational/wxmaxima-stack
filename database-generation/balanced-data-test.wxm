/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 22.04.0 ] */
/* [wxMaxima: title   start ]
STACK Sandbox
   [wxMaxima: title   end   ] */


/* [wxMaxima: comment start ]
This document loads the extra files needed for STACK.
See https://github.com/maths/moodle-qtype_stack

1. Set your operation system in the variable maximaplatform. For Windows set it to "win".
2. If needed, set the stacklocation variable to the location of this sandbox file and the needed maxima and lisp files.
3. Specify a directory for temporary working files, e.g. /tmp or C:/tmp
[Directories in 2 & 3 can be the same if you don't mind clutter.]

Note, that plots *will not work* in this sandbox.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
/* No trailing slash. */
/*Santiago, Emmaculate details*/
/*
maximaplatform:"win"$
stacklocation:"c:/tmp/stackroot"$
stacktmplocation:"c:/tmp/stackroot"$
*/

/*Mary details*/
/*
maximaplatform:""$
stacklocation:""$
stacktmplocation:""$
*/

/*Dan details*/

maximaplatform:"win"$
stacklocation:"C:/Users/James/OneDrive/Documents/007_wxMaxima/STACK_sandbox"$
stacklocation:"C:/Users/James/OneDrive/Documents/007_wxMaxima/STACK_sandbox"$


/*Wastalas details*/
/*
maximaplatform:""$
stacklocation:""$
stacktmplocation:""$
*/

/* For MS platforms you normally need to explicitly set the path.
   Use the forward slash as a directory seperator.
   You have cloned your code into c:/tmp/stackroot   
*/

/*
maximaplatform:"win"$
stacklocation:"c:/tmp/stackroot/stack"$
*/


/****************************************************
   There should be no need to edit below this line.  
   
   These commands add the location to Maxima's search path. 
*/
file_search_maxima:append( [sconcat(stacklocation, "/stack/maxima/###.{mac,mc}")] , file_search_maxima)$
file_search_lisp:append( [sconcat(stacklocation, "/stack/maxima/###.{lisp}")] , file_search_lisp)$
file_search_maxima:append( [sconcat(stacktmplocation, "/###.{mac,mc}")] , file_search_maxima)$
file_search_lisp:append( [sconcat(stacktmplocation, "/###.{lisp}")] , file_search_lisp)$

STACK_SETUP(ex):=block(
    MAXIMA_VERSION_NUM_EXPECTED:0,
    MAXIMA_PLATFORM:maximaplatform,
    maxima_tempdir:"",
    IMAGE_DIR:"",
    PLOT_SIZE:[450,300],
    PLOT_TERMINAL:"svg",
    PLOT_TERM_OPT:"dynamic font \",11\" linewidth 1.2",
    DEL_CMD:"rm",
    GNUPLOT_CMD:"gnuplot",
    MAXIMA_VERSION_EXPECTED:"default",
    URL_BASE:"!ploturl!",
    /* Define units available in STACK. */
    stack_unit_si_prefix_code:[y, z, a, f, p, n, u, m, c, d, da, h, k, M, G, T, P, E, Z, Y],
    stack_unit_si_prefix_multiplier:[10^-24, 10^-21, 10^-18, 10^-15, 10^-12, 10^-9, 10^-6, 10^-3, 10^-2, 10^-1, 10, 10^2, 10^3, 10^6, 10^9, 10^12, 10^15, 10^18, 10^21, 10^24],
    stack_unit_si_prefix_tex:["\\mathrm{y}", "\\mathrm{z}", "\\mathrm{a}", "\\mathrm{f}", "\\mathrm{p}", "\\mathrm{n}", "\\mu ", "\\mathrm{m}", "\\mathrm{c}", "\\mathrm{d}", "\\mathrm{da}", "\\mathrm{h}", "\\mathrm{k}", "\\mathrm{M}", "\\mathrm{G}", "\\mathrm{T}", "\\mathrm{P}", "\\mathrm{E}", "\\mathrm{Z}", "\\mathrm{Y}"],
    stack_unit_si_unit_code:[m, l, L, g, t, s, h, Hz, Bq, cd, N, Pa, cal, Cal, Btu, eV, J, W, A, ohm, C, V, F, S, Wb, T, H, Gy, rem, Sv, lx, lm, mol, M, kat, rad, sr, K, VA, eV],
    stack_unit_si_unit_conversions:[m, m^3/1000, m^3/1000, kg/1000, 1000*kg, s, s*3600, 1/s, 1/s, cd, (kg*m)/s^2, kg/(m*s^2), 4.2*J, 4200*J, 1055*J, 1.602177e-19*J, (kg*m^2)/s^2, (kg*m^2)/s^3, A, (kg*m^2)/(s^3*A^2), s*A, (kg*m^2)/(s^3*A), (s^4*A^2)/(kg*m^2), (s^3*A^2)/(kg*m^2), (kg*m^2)/(s^2*A), kg/(s^2*A), (kg*m^2)/(s^2*A^2), m^2/s^2, 0.01*Sv, m^2/s^2, cd/m^2, cd, mol, mol/(m^3/1000), mol/s, rad, sr, K, (kg*m^2)/(s^3), 1.602176634E-19*J],
    stack_unit_si_unit_tex:["\\mathrm{m}", "\\mathrm{l}", "\\mathrm{L}", "\\mathrm{g}", "\\mathrm{t}", "\\mathrm{s}", "\\mathrm{h}", "\\mathrm{Hz}", "\\mathrm{Bq}", "\\mathrm{cd}", "\\mathrm{N}", "\\mathrm{Pa}", "\\mathrm{cal}", "\\mathrm{cal}", "\\mathrm{Btu}", "\\mathrm{eV}", "\\mathrm{J}", "\\mathrm{W}", "\\mathrm{A}", "\\Omega", "\\mathrm{C}", "\\mathrm{V}", "\\mathrm{F}", "\\mathrm{S}", "\\mathrm{Wb}", "\\mathrm{T}", "\\mathrm{H}", "\\mathrm{Gy}", "\\mathrm{rem}", "\\mathrm{Sv}", "\\mathrm{lx}", "\\mathrm{lm}", "\\mathrm{mol}", "\\mathrm{M}", "\\mathrm{kat}", "\\mathrm{rad}", "\\mathrm{sr}", "\\mathrm{K}", "\\mathrm{VA}", "\\mathrm{eV}"],
    stack_unit_other_unit_code:[min, amu, u, mmHg, bar, ha, cc, gal, mbar, atm, torr, rev, deg, rpm, au, Da, Np, B, dB, day, year, hp, in, ft, yd, mi, lb],
    stack_unit_other_unit_conversions:[s*60, amu, amu, 133.322387415*Pa, 10^5*Pa, 10^4*m^2, m^3*10^(-6), 3.785*l, 10^2*Pa, 101325*Pa, 101325/760*Pa, 2*pi*rad, pi*rad/180, pi*rad/(30*s), 149597870700*m, 1.660539040E-27*kg, Np, B, dB, 86400*s, 3.156e7*s, hp, in, 12*in, 36*in, 5280*12*in, lb],
    stack_unit_other_unit_tex:["\\mathrm{min}", "\\mathrm{amu}", "\\mathrm{u}", "\\mathrm{mmHg}", "\\mathrm{bar}", "\\mathrm{ha}", "\\mathrm{cc}", "\\mathrm{gal}", "\\mathrm{mbar}", "\\mathrm{atm}", "\\mathrm{torr}", "\\mathrm{rev}", "\\mathrm{{}^{o}}", "\\mathrm{rpm}", "\\mathrm{au}", "\\mathrm{Da}", "\\mathrm{Np}", "\\mathrm{B}", "\\mathrm{dB}", "\\mathrm{day}", "\\mathrm{year}", "\\mathrm{hp}", "\\mathrm{in}", "\\mathrm{ft}", "\\mathrm{yd}", "\\mathrm{mi}", "\\mathrm{lb}"],
    true)$

/* Load the main libraries. */
load("stackmaxima.mac")$
load("stats")$
load("distrib")$
load("descriptive")$
print(sconcat("[ STACK-Maxima started, library version ", stackmaximaversion, " ]"))$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* Optional but useful. */
display2d:true;
simp:true;
debug:true;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* ------------- INFORMATION FROM QUESTION AUTHORS */

/* Is the data balanced? */
is_balanced: false; /*rand([true, false]);*/

/* Names of the different values for each factor */
factor_names: ["Variety", "Fertiliser"];
factor_values: [["Variety 1", "Variety 2", "Variety 3"], ["Fertiliser 1", "Fertiliser 2", "Fertiliser 3"]];

/* Dataset dimensions */
number_rows: 100;

/* ------------- END AUTHOR INFO */

/* ------------- FUNCTIONS */

/* Function to map position of item in list to coordinates in data list */
/* Input: position of item in list, number between 1 and number_rows */
/* Output: relevant coordinates in factors_info list */
pos_to_coords(num):=block(
    [factor_values:factor_values, 
    number_factors:length(factor_values),
    number_rows:number_rows,
    factor_lengths,
    clock],
    factor_lengths: makelist(length(factor_values[i]),i,1,number_factors),
    /* How regularly is each factor required to change value? */
    clock:reverse(makelist(
        product(factor_lengths[j], j, number_factors+1-i, number_factors),
        i,
        0,
        number_factors-1
    )),
    return(makelist(mod(floor((num-1)/clock[i]),factor_lengths[i])+1, i, 1, number_factors))
);

pos_to_coords(3);

/* ------------- END FUNCTIONS */

/* ------------- DATA SET GENERATION */

/* Number of entries in the pivot table is the number of unique permutations of the values for each factor */
number_permutations: product(length(factor_values[x]), x, 1, length(factor_values));

/* Generate the number of data entries for each permutation of the factor values */
if is_balanced then (
    /* First, suppose each permutation occurs the same number of times */
    number_data_entries: makelist(floor(number_rows/number_permutations), i, 1, number_permutations),
    /* Then, distribute the remaining entries so that there are the correct number of data rows */
    remainder: number_rows - sum(number_data_entries[i], i, 1, number_permutations),
    remainder_list: random_permutation(makelist(floor(remainder/i), i, 1, number_permutations)),
    /* Finally, incorperate some small random changes in the data */
    abs_changes_list: append(makelist(rand(3), i, 1, floor(number_permutations/2))),
    changes_list:random_permutation(append(apply(append, makelist([x, -x], x, abs_changes_list)), makelist(0, i, 1, number_permutations-2*floor(number_permutations/2)))),
    /* Add the remainder terms and the random changes onto the number of pieces of data */
    number_data_entries: number_data_entries + remainder_list + changes_list
) else (
    /* First, ensure the data is unbalanced by making one permutation occur more often than would be expected */
    number_data_entries: [rand_with_step(2*floor(number_rows/number_permutations), number_rows/2, 1)],
    total_entries: number_data_entries[1],
    /* Then add the remaining randomized entries */
    for i: 1 thru number_permutations-2 step 1 do (
        number_data_entries: append(number_data_entries, [rand_with_step(1, number_rows - total_entries - 3*(number_permutations-i), 1)]),
        total_entries: total_entries + last(number_data_entries)
    ),
    /* Finally, ensure there are the correct number of entries overall */
    number_data_entries: random_permutation(append(number_data_entries, [number_rows - total_entries]))
);

/* Create the data set containing the specified number of each permutation of the factor values */
data_set: random_permutation(apply(append,
    makelist(
        makelist(
            makelist(factor_values[i][pos_to_coords(k)[i]], i, 1, length(factor_values)), 
            j, 1, number_data_entries[k]),
        k, 1, number_permutations
    )
));

/* Give each element in the data set an index number */
data_set: append(
    [append(["Farm number"], factor_names)], 
    makelist(append([i], data_set[i]), i, 1, number_rows)
);

/* ------------- END OF DATA SET GENERATION */

/* table data */
ta_1: number_data_entries[1];
ta_2: number_data_entries[2];
ta_3: number_data_entries[3];

ta_5: number_data_entries[4];
ta_6: number_data_entries[5];
ta_7: number_data_entries[6];

ta_9: number_data_entries[7];
ta_10: number_data_entries[8];
ta_11: number_data_entries[9];


/* totals */
ta_4: ta_1 + ta_2 + ta_3;
ta_8: ta_5 + ta_6 + ta_7;
ta_12: ta_9 + ta_10 + ta_11;

ta_13: ta_1 + ta_5 + ta_9;
ta_14: ta_2 + ta_6 + ta_10;
ta_15: ta_3 + ta_7 + ta_11;

/* balanced? */
ma_16: [["Yes", is_balanced], ["No", not(is_balanced)]];

/* [wxMaxima: input   end   ] */



/* Old versions of Maxima abort on loading files that end in a comment. */
"Created with wxMaxima 22.04.0"$
