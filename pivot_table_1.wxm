/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 22.04.0 ] */
/* [wxMaxima: title   start ]
STACK Sandbox
   [wxMaxima: title   end   ] */


/* [wxMaxima: comment start ]
This document loads the extra files needed for STACK.
See https://github.com/maths/moodle-qtype_stack

1. Set your operation system in the variable maximaplatform. For Windows set it to "win".
2. If needed, set the stacklocation variable to the location of this sandbox file and the needed maxima and lisp files.
3. Specify a directory for temporary working files, e.g. /tmp or C:/tmp
[Directories in 2 & 3 can be the same if you don't mind clutter.]

Note, that plots *will not work* in this sandbox.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
/* No trailing slash. */
/*Santiago, Emmaculate details*/
/*
maximaplatform:"win"$
stacklocation:"c:/tmp/stackroot"$
stacktmplocation:"c:/tmp/stackroot"$
*/

/*Mary details*/
/*
maximaplatform:""$
stacklocation:""$
stacktmplocation:""$
*/

/*Dan details*/

maximaplatform:"win"$
stacklocation:"C:/Users/James/OneDrive/Documents/007_wxMaxima/STACK_sandbox"$
stacklocation:"C:/Users/James/OneDrive/Documents/007_wxMaxima/STACK_sandbox"$


/*Wastalas details*/
/*
maximaplatform:"win"$
stacklocation:"c:/tmp/stackroot"$
stacktmplocation:"c:/tmp/stackroot"$
*/

/* For MS platforms you normally need to explicitly set the path.
   Use the forward slash as a directory seperator.
   You have cloned your code into c:/tmp/stackroot   
*/

/*
maximaplatform:"win"$
stacklocation:"c:/tmp/stackroot/stack"$
*/


/****************************************************
   There should be no need to edit below this line.  
   
   These commands add the location to Maxima's search path. 
*/
file_search_maxima:append( [sconcat(stacklocation, "/stack/maxima/###.{mac,mc}")] , file_search_maxima)$
file_search_lisp:append( [sconcat(stacklocation, "/stack/maxima/###.{lisp}")] , file_search_lisp)$
file_search_maxima:append( [sconcat(stacktmplocation, "/###.{mac,mc}")] , file_search_maxima)$
file_search_lisp:append( [sconcat(stacktmplocation, "/###.{lisp}")] , file_search_lisp)$

STACK_SETUP(ex):=block(
    MAXIMA_VERSION_NUM_EXPECTED:0,
    MAXIMA_PLATFORM:maximaplatform,
    maxima_tempdir:"",
    IMAGE_DIR:"",
    PLOT_SIZE:[450,300],
    PLOT_TERMINAL:"svg",
    PLOT_TERM_OPT:"dynamic font \",11\" linewidth 1.2",
    DEL_CMD:"rm",
    GNUPLOT_CMD:"gnuplot",
    MAXIMA_VERSION_EXPECTED:"default",
    URL_BASE:"!ploturl!",
    /* Define units available in STACK. */
    stack_unit_si_prefix_code:[y, z, a, f, p, n, u, m, c, d, da, h, k, M, G, T, P, E, Z, Y],
    stack_unit_si_prefix_multiplier:[10^-24, 10^-21, 10^-18, 10^-15, 10^-12, 10^-9, 10^-6, 10^-3, 10^-2, 10^-1, 10, 10^2, 10^3, 10^6, 10^9, 10^12, 10^15, 10^18, 10^21, 10^24],
    stack_unit_si_prefix_tex:["\\mathrm{y}", "\\mathrm{z}", "\\mathrm{a}", "\\mathrm{f}", "\\mathrm{p}", "\\mathrm{n}", "\\mu ", "\\mathrm{m}", "\\mathrm{c}", "\\mathrm{d}", "\\mathrm{da}", "\\mathrm{h}", "\\mathrm{k}", "\\mathrm{M}", "\\mathrm{G}", "\\mathrm{T}", "\\mathrm{P}", "\\mathrm{E}", "\\mathrm{Z}", "\\mathrm{Y}"],
    stack_unit_si_unit_code:[m, l, L, g, t, s, h, Hz, Bq, cd, N, Pa, cal, Cal, Btu, eV, J, W, A, ohm, C, V, F, S, Wb, T, H, Gy, rem, Sv, lx, lm, mol, M, kat, rad, sr, K, VA, eV],
    stack_unit_si_unit_conversions:[m, m^3/1000, m^3/1000, kg/1000, 1000*kg, s, s*3600, 1/s, 1/s, cd, (kg*m)/s^2, kg/(m*s^2), 4.2*J, 4200*J, 1055*J, 1.602177e-19*J, (kg*m^2)/s^2, (kg*m^2)/s^3, A, (kg*m^2)/(s^3*A^2), s*A, (kg*m^2)/(s^3*A), (s^4*A^2)/(kg*m^2), (s^3*A^2)/(kg*m^2), (kg*m^2)/(s^2*A), kg/(s^2*A), (kg*m^2)/(s^2*A^2), m^2/s^2, 0.01*Sv, m^2/s^2, cd/m^2, cd, mol, mol/(m^3/1000), mol/s, rad, sr, K, (kg*m^2)/(s^3), 1.602176634E-19*J],
    stack_unit_si_unit_tex:["\\mathrm{m}", "\\mathrm{l}", "\\mathrm{L}", "\\mathrm{g}", "\\mathrm{t}", "\\mathrm{s}", "\\mathrm{h}", "\\mathrm{Hz}", "\\mathrm{Bq}", "\\mathrm{cd}", "\\mathrm{N}", "\\mathrm{Pa}", "\\mathrm{cal}", "\\mathrm{cal}", "\\mathrm{Btu}", "\\mathrm{eV}", "\\mathrm{J}", "\\mathrm{W}", "\\mathrm{A}", "\\Omega", "\\mathrm{C}", "\\mathrm{V}", "\\mathrm{F}", "\\mathrm{S}", "\\mathrm{Wb}", "\\mathrm{T}", "\\mathrm{H}", "\\mathrm{Gy}", "\\mathrm{rem}", "\\mathrm{Sv}", "\\mathrm{lx}", "\\mathrm{lm}", "\\mathrm{mol}", "\\mathrm{M}", "\\mathrm{kat}", "\\mathrm{rad}", "\\mathrm{sr}", "\\mathrm{K}", "\\mathrm{VA}", "\\mathrm{eV}"],
    stack_unit_other_unit_code:[min, amu, u, mmHg, bar, ha, cc, gal, mbar, atm, torr, rev, deg, rpm, au, Da, Np, B, dB, day, year, hp, in, ft, yd, mi, lb],
    stack_unit_other_unit_conversions:[s*60, amu, amu, 133.322387415*Pa, 10^5*Pa, 10^4*m^2, m^3*10^(-6), 3.785*l, 10^2*Pa, 101325*Pa, 101325/760*Pa, 2*pi*rad, pi*rad/180, pi*rad/(30*s), 149597870700*m, 1.660539040E-27*kg, Np, B, dB, 86400*s, 3.156e7*s, hp, in, 12*in, 36*in, 5280*12*in, lb],
    stack_unit_other_unit_tex:["\\mathrm{min}", "\\mathrm{amu}", "\\mathrm{u}", "\\mathrm{mmHg}", "\\mathrm{bar}", "\\mathrm{ha}", "\\mathrm{cc}", "\\mathrm{gal}", "\\mathrm{mbar}", "\\mathrm{atm}", "\\mathrm{torr}", "\\mathrm{rev}", "\\mathrm{{}^{o}}", "\\mathrm{rpm}", "\\mathrm{au}", "\\mathrm{Da}", "\\mathrm{Np}", "\\mathrm{B}", "\\mathrm{dB}", "\\mathrm{day}", "\\mathrm{year}", "\\mathrm{hp}", "\\mathrm{in}", "\\mathrm{ft}", "\\mathrm{yd}", "\\mathrm{mi}", "\\mathrm{lb}"],
    true)$

/* Load the main libraries. */
load("stackmaxima.mac")$
load("stats")$
load("distrib")$
load("descriptive")$
print(sconcat("[ STACK-Maxima started, library version ", stackmaximaversion, " ]"))$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* Optional but useful. */
display2d:true;
simp:true;
debug:true;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/*Information given by question authors*/
factor_names:["Fertiliser","Variety"];
factors_info:[
    [[0,"Fertiliser 1"],[5,"Fertiliser 2"],[7.5,"Fertiliser 3"]],
    [[0,"Variety 1"],[10,"Variety 2"]]
];
base_yield:50;
error_mean:0;
error_sd:5;
replications:10;

/*Basic variables from inputs*/
number_factors:length(factors_info);
number_rows:product(length(factors_info[i]),i,1,length(factors_info))*replications;

/*Function to calculate the yield for a given data row*/
/*Input: list of coordinates for each factor*/
/*Output: expected yield for the given combination of factors without interactions*/
effect_calculator(coords):=block(
    [
        factors_info:factors_info,
        counter_1,
        effects_sum
    ],
    effects_sum:sum(factors_info[counter_1][coords[counter_1]][1],counter_1,1,length(factors_info)),
    return(effects_sum)
);

/*Function to create the labels for a given data row*/
/*Input: List of coordinates for each factor*/
/*Output: list of labels for the given combination of factors without interactions*/
create_label(coords):=block(
    [
        factors_info:factors_info,
        number_factors:number_factors,
        i,
        label_maker
    ],
    label_maker:makelist(factors_info[i][coords[i]][2],i,1,number_factors),
    return(label_maker)
);

/* Function to map position of item in list to coordinates in data list */
/* Input: position of item in list, number between 1 and number_rows */
/* Output: relevant coordinates in factors_info list */
pos_to_coords(num):=block(
    [factors_info:factors_info, 
    number_factors:number_factors,
    number_rows:number_rows,
    factor_lengths,
    clock],
    factor_lengths: makelist(length(factors_info[i]),i,1,number_factors),
    /* How regularly is each factor required to change value? */
    clock:reverse(makelist(
        product(factor_lengths[j], j, number_factors+1-i, number_factors),
        i,
        0,
        number_factors-1
    )),
    return(makelist(mod(floor((num-1)/clock[i]),factor_lengths[i])+1, i, 1, number_factors))
);

/*Create the data set (all 0s) and the corresponding coordinates list*/
data_set:makelist(makelist(0,j,1,number_factors+2),i,1,number_rows);
coord_list:makelist(0,i,1,number_rows);

/*replce 0s with corresponding labels and generated yields (plus error term) using the relevant functions*/
for i: 1 thru number_rows do (
    coords: pos_to_coords(ceiling(i/replications)),
    coord_list[i]: coords,
    yield_value: float(base_yield + effect_calculator(coords) + error_sd*quantile_normal(rand(1.0),error_mean,1)),
    label_value: create_label(coords),
    rep_value: if mod(i,replications) = 0 then replications else mod(i,replications),
    data_set[i]: append(label_value, [rep_value], [yield_value])
);

/* Add headers row to data set */
data_set:append(
    [append(factor_names, ["Replication", "Yield"])],
    data_set
);

/* question 1 */
quest_expr1:rand(["Mean","Minimum","Maximum","Median"]);
all_yields: makelist(data_set[i][4], i, 2, number_rows+1);
ta_1: if quest_expr1="Mean" then mean(all_yields)
    else if quest_expr1="Minimum" then first(sort(all_yields))
    else if quest_expr1="Maximum" then last(sort(all_yields))
    else if quest_expr1="Median" then median(all_yields);

/* question 2 */
quest_expr2:rand(["Mean","Minimum","Maximum","Median"]);
var1_list: sublist(data_set, lambda([x], is(x[2]="Variety 1")));
var1_yields: makelist(var1_list[i][4], i, 1, length(var1_list));

ta_2: if quest_expr2="Mean" then mean(var1_yields)
    else if quest_expr2="Minimum" then first(sort(var1_yields))
    else if quest_expr2="Maximum" then last(sort(var1_yields))
    else if quest_expr2="Median" then median(var1_yields);

/* question 3 */
quest_expr3:rand(["Mean","Minimum","Maximum","Median"]);
fert1_var1_list: sublist(var1_list, lambda([x], is(x[1]="Fertiliser 1")));
fert1_var1_yields: makelist(fert1_var1_list[i][4], i, 1, length(fert1_var1_list));

ta_3: if quest_expr3="Mean" then mean(fert1_var1_yields)
    else if quest_expr3="Minimum" then first(sort(fert1_var1_yields))
    else if quest_expr3="Maximum" then last(sort(fert1_var1_yields))
    else if quest_expr3="Median" then median(fert1_var1_yields);

/* [wxMaxima: input   end   ] */



/* Old versions of Maxima abort on loading files that end in a comment. */
"Created with wxMaxima 22.04.0"$
